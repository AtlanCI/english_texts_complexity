
/**
 * @fileoverview Custom functionality to apply throughout every adsize. This
 * has a dependency on common.js and utils.js
 */
var custom = (function() {

  /**
   * Classes which our JS hooks into. Add more class names as necessary.
   * @enum
   * @private
   */
  var elementClass_ = {
    item: 'js-item',
    itemName: 'js-item-name',
    itemPrice: 'js-item-price',
    itemSalePrice: 'js-item-saleprice',
    itemRegularPrice: 'js-item-regularprice'
  };

  /**
  * Element IDs.
  * @enum {string}
  * @private
  */
  var elementId_ = {
    gpaDataProvider: 'gpa-data-provider'
  };

  /**
   * Initialization. Called from handleAdInitialized on each page.
   */
  function init() {
    utils.log('custom.init()');
    var data = common.getAdData();
    if (!data) return;

    // If you're using the swipe gallery to display feed items.
    initItemsUsingGallery_();

    // If you're NOT using the swipe gallery to display feed items.
    //initItemsWithoutGallery_();


  }

  /**
   * Custom updates per frame shown event.
   * @param {Event event
   */
  function galleryFrameShown(event) {
    var index = common.getCurrentItemIndex();
    updateArrowDisplay (index);
  }
 
  /**
   * Custom Mouseover interaction functionality.
   * @param {index} current index (zero based)
   */
  function updateArrowDisplay (index) {
    common.setCurrentItemIndex(index);
    var gallery = common.getGallery();
    var numFramesPerPage = common.galleryNumFramesPerPage(gallery);
    var itemsLength = gallery.querySelectorAll('.' + elementClass_.item).length;
    var numTotalPages = Math.ceil(itemsLength / numFramesPerPage);
    lastFrame = itemsLength;
    var lastFrameCondition;
    if (numFramesPerPage > 1) {
      lastFrameCondition = lastFrame;
    } else {
      lastFrameCondition = lastFrame - 1;
    }
 
    if (index <= 0) {
      leftEnd = true;
      rightEnd = false;
    } else if ( (index * numFramesPerPage) >= lastFrameCondition ) {
      rightEnd = true;
      leftEnd = false;
    } else {
      rightEnd = false;
      leftEnd = false;
    }
  }

  function removeCentsFromString(price) {
    if(! price) return;
    var matcher = /(\.|\,)0{2}(?![\d])/;
    return price.replace(matcher, '');
  };

  // Manipulate 'Price Discount Percentage' from a decimal to whole number, add - & %
  function transformDynamicData () {
    console.log("transformDynamicData")
    var dataProvider = document.querySelector('#' + elementId_.gpaDataProvider);
    console.log("data: " + dataProvider);
    dataProvider.addDataTransformer(function(dynamicData) {
      for (var i = 0; i < dynamicData.Product.length; i++) {
        var item = dynamicData.Product[i];
        // Remove cents from each price.
        item.price = removeCentsFromString(item.price);
        item.salePrice = removeCentsFromString(item.salePrice);
        item.regularPrice = removeCentsFromString(item.regularPrice);
      };

      var aryProducts = dynamicData.Product;
      if(!aryProducts) return;
      for(var i = 0; i < aryProducts.length; i++ ){
        var discountData = aryProducts[i].salePercentDiscount;
        if (discountData != null && discountData > 0 && discountData < 1) {
          var discountText = "-" + Math.round(discountData * 100) + "%";
          aryProducts[i].salePercentDiscount = discountText;
        }
      }
    });
  }

  /**
   * Find all items used in the swipe gallery and initialize custom behavior.
   * @private
   */
  function initItemsUsingGallery_() {
    var gallery = common.getGallery();

    // Apply settings to each item in the gallery
    var items = gallery.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Find all items used outside the gallery and initialize custom behavior.
   * @private
   */
  function initItemsWithoutGallery_() {
    // Apply settings to each item
    var items = document.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Set the display settings for each item.
   * Add any custom functionality you need applied on load.
   * @param {Element} item Item element.
   * @private
   */
  function initItemDisplay_(item) {

    // if you're using sales prices.
    //setSalePricesDisplay_(item);

    // Set mouseout.
    itemMouseOut(item);
  }

  /**
   * Sets the 3 price elements to display correctly when using sales price.
   * Find your price elements and set into common functionality.
   * @param {Element} item Item element.
   * @private
   */
  function setSalePricesDisplay_(item) {
    // Get reference to each price element.
    var itemPrice = item.querySelector('.' + elementClass_.itemPrice);
    var itemSalePrice = item.querySelector('.' + elementClass_.itemSalePrice);
    var itemRegularPrice = item.querySelector('.' + elementClass_.itemRegularPrice);

    // Sets each item to display correct prices.
    common.displayCorrectPrices(itemPrice, itemSalePrice, itemRegularPrice);
  }

  /**
   * Custom Item Mouse Interactions. Add your own behavior.
   */

  /**
   * Custom Mouseover interaction functionality.
   * @param {Element} item
   */
  function itemMouseOver(item) {
    var cta = item.querySelector(".js-item-cta");
    cta.style.backgroundColor = "#005e94";
  }

  /**
   * Custom Mouseout interaction functionality.
   * @param {Element} item
   */
  function itemMouseOut(item) {
    var cta = item.querySelector(".js-item-cta");
    cta.style.backgroundColor = "";
  }

  return {
    init: init,
    itemMouseOver: itemMouseOver,
    itemMouseOut: itemMouseOut,
    transformDynamicData: transformDynamicData,
    galleryFrameShown:galleryFrameShown
  };

})();
